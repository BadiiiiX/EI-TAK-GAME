[note: Legend\n aquamarine: Abstract\n blueviolet: Enum\n coral: Record\n chartreuse: Interface]

// ===> MODELS <===

// Board

[≪IBoard≫;AbstractBoard{bg:aquamarine}| ﹟ List＜List＜Deque＜IPiece＞＞＞ board; ﹟ BoardSize size; | + Deque＜IPiece＞ getTile(Position); ﹟ List＜List＜Deque＜IPiece＞＞＞ fillBoard()]

[Board| + IBoard copy()]

[≪Enum≫;BoardSize{bg:blueviolet}| TINY(3, 10, 0); SMALL(4, 15, 0); MEDIUM(5, 21, 0); LARGE(6, 30, 1); HUGE(8, 50, 2) | - int size; - int initialStone; - int initialCapstones]

[≪Record≫;Position{bg:coral}| + int row; + int col | Position translate(int, int)]

// BoardLinks
[Board]-^[AbstractBoard]
[AbstractBoard]++->[BoardSize]
[AbstractBoard]++->[Position]


// Player

[≪IPlayer≫;AbstractPlayer{bg:aquamarine}| ﹟ TeamColor color; ﹟String name; ﹟ PlayerInventory inventory;]

[HumanPlayer]

[PlayerInventory| - int captsone; int stone; | + void useCapstone(); +void useStone(); + bool hasCapstone() ; + bool hasStone();]

//PlayerLinks
[HumanPlayer]-^[AbstractPlayer]
[AbstractPlayer]++->[PlayerInventory]


// Move

[Move| - Position from; - Position to; - int count; - List＜int＞ drops; - bool isCapstone; - bool isStanding; - bool isPlacement | + Move slide(Position, Poisition, int, List＜int＞)]


// Piece

[≪IPiece≫;AbstractPiece{bg:aquamarine}| ﹟ TeamColor color; ﹟ PieceKind kind; | + void flatten()]

[CapStone]

[Stone]

[≪Enum≫;PieceKind{bg:blueviolet}| FLAT; STANDING; CAPSTONE]

//PieceLinks
[Stone]-^[AbstractPiece]
[CapStone]-^[AbstractPiece]

[AbstractPiece]++->[PieceKind]


//state/game

[≪Interface≫;IGameState{bg:chartreuse}]
[GameState| - IBoard board; - IPlayer currentPlayer; - IHistory history; - IPlayer winner]

//state/gameLinks
[IGameState]^-.-[GameState]


//state/history

[≪Interface≫;IHistory{bg:chartreuse}| + void record(Move); + Move undo(); + int size()]
[History| - Deque＜Move＞ moves | + bool canUndo(); ]

//state/historyLinks
[History]-.-^[IHistory]


//team

[≪Enum≫;TeamColor{bg:blueviolet}| BLACK(255, 255, 255); WHITE(0, 0, 0)| - int red; - int green; -int blue;]


// ===> EVENT <===

//Event
[≪Interface≫;IEvent{bg:chartreuse}]


//EventBus
[EventBus| - Map＜Class＜IEvent＞, List＜Fn＜IEvent＞＞＞ listeners| + void register(IEvent, Fn＜IEvent＞); + void post(IEvent)]


//events
[≪Record≫;GameStartedEvent{bg:coral}| + IGameState gameState]
[≪Record≫;GameEndedEvent{bg:coral}| + IGameState gameState]

//EventLinks
[GameStartedEvent]-.-^[IEvent]
[GameEndedEvent]-.-^[IEvent]
[EventBus]<>->[IEvent]


// ===> SERVICES <===

//TurnManager

[TurnManager| - List＜IPlayer＞ players; - int currentIndex; - int turnNumber; + IPlayer nextPlayer(); + previousPlayer();]

//game
[≪Interface≫;IGame{bg:chartreuse}| void start(); void PlayMove(Move); void undo();]

[Game| - IBoard board; - IGameState state; - TurnManager turnManager]

//GameLinks
[Game]-.-^[IGame]


//BoardFactory
[BoardFactory| + Board create(BoardSize)]

//GameFactory
[GameFactory| + Game create(BoardSize, String, String)]

//PieceFactory
[PieceFactory| + Stone createStone(TeamColor, PieceKind); + CapStone createCapstone(TeamColor)]

//PlayerFactory
[PlayerFactory| + HumanPlayer create(String, TeamColor, BoardSize)]

//ExtraLink


//--gamestate--
[IGameState]++->[AbstractBoard]
[IGameState]++->[AbstractPlayer]
[IGameState]++->[IHistory]


// --board--
[AbstractBoard]++->[AbstractPiece]


//--piece--
[AbstractPiece]++->[TeamColor]


//--player--
[AbstractPlayer]++->[TeamColor]


//--history--
[IHistory]++->[Move]


//--turnmanager--
[TurnManager]++->[AbstractPlayer]


//--game--
[IGame]++->[Move]
[IGame]++->[IGameState]
[Game]++->[TurnManager]
[Game]++->[EventBus]
[Game]++->[AbstractBoard]
[Game]++>[GameStartedEvent]


//--move--
[Move]++->[Position]


//--boardfactory--
[BoardFactory]<>->[BoardSize]
[BoardFactory]<>->[Board]


//--gamefactory--
[GameFactory]<>->[BoardSize]
[GameFactory]<>->[Board]


//--piecefactory--
[PieceFactory]<>->[TeamColor]
[PieceFactory]<>->[PieceKind]
[PieceFactory]<>->[Stone]
[PieceFactory]<>->[CapStone]


//--playerfactory--
[PlayerFactory]<>->[HumanPlayer]
[PlayerFactory]<>->[PieceKind]
[PlayerFactory]<>->[BoardSize]


//--events
[GameStartedEvent]<>->[IGameState]
[GameEndedEvent]<>->[IGameState]